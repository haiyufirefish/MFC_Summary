
// 03_Editor.cpp : 
//

#include "stdafx.h"
#include "afxwinappex.h"
#include "afxdialogex.h"
#include "03_Editor.h"
#include "MainFrm.h"

#include "03_EditorDoc.h"
#include "03_EditorView.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CMy03_EditorApp

BEGIN_MESSAGE_MAP(CMy03_EditorApp, CWinAppEx)
	ON_COMMAND(ID_APP_ABOUT, &CMy03_EditorApp::OnAppAbout)
	ON_COMMAND(ID_FILE_NEW, &CWinAppEx::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, &CWinAppEx::OnFileOpen)
	ON_COMMAND(ID_FILE_PRINT_SETUP, &CWinAppEx::OnFilePrintSetup)
END_MESSAGE_MAP()


// CMy03_EditorApp ¹¹Ôì

CMy03_EditorApp::CMy03_EditorApp()
{
	// Support restart manager
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// If the application is built with common language runtime support (/clr), then:
// 1) This additional setting is required for "Restart Manager" support to work properly.
// 2) In your project, you must add references to System.Windows.Forms in build order.
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: Replace the following application ID string with a unique ID string; recommended string format
//For CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("03_Editor.AppID.NoVersion"));

}

// The unique CMy03_EditorApp object

CMy03_EditorApp theApp;


// CMy03_EditorApp init

BOOL CMy03_EditorApp::InitInstance()
{
	// If an application running on Windows XP manifest specifies
	// Use ComCtl32.dll version 6 or higher to enable visual mode,
	//You need InitCommonControlsEx(). Otherwise, the window will not be created.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// Set this to include all the
//Public control class.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinAppEx::InitInstance();


	// init OLE library
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();

	EnableTaskbarInteraction(FALSE);

	
	SetRegistryKey(_T("Native application generated by application wizard"));
	LoadStdProfileSettings(4);  // Load standard INI file options (including MRU)


	// Register the application's document template. Document template
// Will be used as a connection between the document, frame window and view
	CSingleDocTemplate* pDocTemplate;
	pDocTemplate = new CSingleDocTemplate(
		IDR_MAINFRAME,
		RUNTIME_CLASS(CMy03_EditorDoc),
		RUNTIME_CLASS(CMainFrame),       // main SDI framework
		RUNTIME_CLASS(CMy03_EditorView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);


	// Analyze command lines for standard shell commands, DDE, and open file operations
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);



	// Schedule the command specified on the command line. if
// Returns FALSE if the application is started with /RegServer, /Register, /Unregserver or /Unregister.
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	// The only window is initialized, so show it and update it
	m_pMainWnd->ShowWindow(SW_SHOW);
	m_pMainWnd->UpdateWindow();
	return TRUE;
}

int CMy03_EditorApp::ExitInstance()
{
	AfxOleTerm(FALSE);

	return CWinAppEx::ExitInstance();
}

// CMy03_EditorApp message handler


// CAboutDlg dialog for the application's About menu item

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// Dialog data
	enum { IDD = IDD_ABOUTBOX };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support

//impl
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// Application command for running dialog box
void CMy03_EditorApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

// CMy03_EditorApp 



